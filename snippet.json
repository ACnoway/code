{
    "自适应快读": {
        "scope": "cpp",
        "prefix": "@read",
        "body": [
            "template<typename T>",
            "void read(T&ans)",
            "{",
            "    ans=0;",
            "    char us=getchar();",
            "    bool f=false;",
            "    while(us<48||us>57){",
            "        f|=(us==45);",
            "        us=getchar();",
            "    }",
            "    while(us>47&&us<58){",
            "        ans=(ans<<1)+(ans<<3)+(us^48);",
            "        us=getchar();",
            "    }",
            "    ans*=f?-1:1;",
            "    return;",
            "}",
            "template<typename T,typename ...O>",
            "void read(T&x,O&...oth)",
            "{",
            "    read(x);",
            "    read(oth...);",
            "}",
            "template<typename T=signed int>T read(void){T x;read(x);return x;}",
        ],
        "description": "fast_read",
        "isFileTemplate": false
    },
    "链表双端队列": {
        "scope": "cpp",
        "prefix": "@deque_list",
        "body": [
            "template <class T>",
            "struct deque",
            "{",
            "    struct node",
            "    {",
            "        node *lst;",
            "        node *nt;",
            "        T data;",
            "        node(node *a, node *b, T c) : lst(a), nt(b), data(c) {}",
            "    };",
            "    node *fst;",
            "    node *lst;",
            "    deque()",
            "    {",
            "        lst = fst = new node(nullptr, nullptr, 0);",
            "    }",
            "    void push_back(T x)",
            "    {",
            "        node *us = new node(lst, nullptr, x);",
            "        lst = lst->nt = us;",
            "    }",
            "    void push_front(T x)",
            "    {",
            "        node *us = new node(fst, fst->nt, x);",
            "        fst->nt = fst->nt->lst = us;",
            "    }",
            "    void pop_front()",
            "    {",
            "        if (fst->nt)",
            "        {",
            "            fst = fst->nt;",
            "            delete fst->lst;",
            "            lst->lst=nullptr;",
            "        }",
            "    }",
            "    void pop_back()",
            "    {",
            "        if (lst->lst)",
            "        {",
            "            lst = lst->lst;",
            "            delete lst->nt;",
            "            lst->nt=nullptr;",
            "        }",
            "    }",
            "    T front()",
            "    {",
            "        return fst->nt->data;",
            "    }",
            "    T back()",
            "    {",
            "        return lst->data;",
            "    }",
            "    bool empty()",
            "    {",
            "        return lst == fst;",
            "    }",
            "};",
        ],
        "description": "deque_list",
        "isFileTemplate": false
    },
    "随机访问双端队列": {
        "scope": "cpp",
        "prefix": "@deque_random",
        "body": [
            "template <class T, unsigned int sz>",
            "struct deque",
            "{",
            "    T data[sz];",
            "    int fst, lst;",
            "    deque(void) { fst = 1, lst = 0; }",
            "    void push_back(T x){data[++lst]=x;}",
            "    void push_front(T x){data[--fst]=x;}",
            "    void pop_front(){++fst;}",
            "    void pop_back(){--lst;}",
            "    T front(){return data[fst];}",
            "    T back(){return data[lst];}",
            "    bool empty(){return fst>lst;}",
            "};",
        ],
        "description": "deque_random",
        "isFileTemplate": false
    },
    "对拍构造": {
        "scope": "cpp",
        "prefix": "@build",
        "body": [
            "#include <iostream>",
            "#include <cstdio>",
            "using namespace std;",
            "int main()",
            "{",
            "    int n;",
            "    freopen(\"seed.txt\", \"r\", stdin);",
            "    cin >> n;",
            "    srand(n);",
            "    fclose(stdin);",
            "    freopen(\"seed.txt\", \"w\", stdout);",
            "    cout << rand();",
            "}",
        ],
        "description": "debug",
        "isFileTemplate": true
    },
    "min和max的宏定义": {
        "scope": "cpp",
        "prefix": "@mm",
        "body": [
            "#define mi2(a,b) (a<b?a:b)",
            "#define mx2(a,b) (a>b?a:b)"
        ],
        "description": "A define of min and max",
        "isFileTemplate": false
    },
    "分块宏定义": {
        "scope": "cpp",
        "prefix": "@fk",
        "body": [
            "#define belong(x) ((x-1)/sqrtn+1)",
            "#define begin(x) ((x-1)*sqrtn+1)",
            "#define end(x) ((x)*sqrtn)"
        ],
        "description": "divide in blocks",
        "isFileTemplate": false
    },
    "邻接表基础存图": {
        "scope": "cpp",
        "prefix": "@fst",
        "body": [
            "$1 fst[MAXN],nt[MAXM];",
            "$2 to[MAXM];",
            "$3 v[MAXM];",
            "void addline($2 a,$2 b,$3 c=1){",
            "    static int i=0;",
            "    to[++i]=b,nt[i]=fst[a],fst[a]=i,v[i]=c;",
            "    to[++i]=a,nt[i]=fst[b],fst[b]=i,v[i]=c;",
            "}",
        ]
    },
    "初始化数组": {
        "scope": "cpp",
        "prefix": "@mem",
        "body": [
            "memset($1,$2,sizeof $1);",
        ]
    },
    "初始化指针": {
        "scope": "cpp",
        "prefix": "@mem",
        "body": [
            "memset($1,$2,$3*sizeof *$1);",
        ]
    },
    "邻接表遍历单点边": {
        "scope": "cpp",
        "prefix": "@for",
        "body": [
            "for($1=fst[$2];$1;$1=nt[$1])",
        ]
    },
    "流读写": {
        "scope": "cpp",
        "prefix": "@io",
        "body": [
            "namespace IO{",
            "    int len=0;",
            "    char ibuf[(1<<20)+1],*iS,*iT,out[(1<<26)+1];",
            "    #define gh() (iS==iT?iT=(iS=ibuf)+fread(ibuf,1,(1<<20)+1,stdin),(iS==iT?EOF:*iS++):*iS++)",
            "    #define reg register",
            "    inline int read(){",
            "        reg char ch=gh();",
            "        reg int x=0;",
            "        reg char t=0;",
            "        while(ch<'0'||ch>'9')   t|=ch=='-',ch=gh();",
            "        while(ch>='0'&&ch<='9') x=x*10+(ch^48),ch=gh();",
            "        return t?-x:x;",
            "    }",
            "    inline void putc(char ch){",
            "        out[len++]=ch;",
            "    }",
            "    template<class T>",
            "    inline void write(T x){",
            "        if(x<0)putc('-'),x=-x;",
            "        if(x>9)write(x/10);",
            "        out[len++]=x%10+48;",
            "    }",
            "    inline void flush(){",
            "        fwrite(out,1,len,stdout);",
            "        len=0;",
            "    }",
            "}",
            "using IO::read;",
            "using IO::write;",
            "using IO::flush;",
            "using IO::putc;",
        ]
    },
    "重链剖分定义": {
        "scope": "cpp",
        "prefix": "@zpld",
        "body": [
            "$1 zpld[MAXN],bigc[MAXN],depth[MAXN],fa[MAXN],dfsn[MAXN];",
            "$2 weight[MAXN];",
            "$3 data[MAXN];",
        ]
    },
    "必备头文件": {
        "prefix": "@include",
        "scope": "cpp",
        "body": [
            "#include<iostream>",
            "#include<cstdio>",
        ],
    },
}